name: Monitoring and Alerts
on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_run:
    workflows: ["CI Failure Handler", "Infinite Loop Prevention"]
    types: [completed]

jobs:
  system-monitoring:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: System Health Check
        id: health_check
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Check automation block status
            const isBlocked = fs.existsSync('.automation-blocked');
            let blockInfo = null;
            
            if (isBlocked) {
              try {
                blockInfo = JSON.parse(fs.readFileSync('.automation-blocked', 'utf8'));
              } catch (e) {
                blockInfo = { reason: 'Unknown', timestamp: 'Unknown' };
              }
            }
            
            // Check recent issues for problems
            const { data: recentIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'system-alert,urgent,human-fix-needed',
              per_page: 10
            });
            
            // Check workflow failures
            const now = new Date();
            const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
            
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              created: `>${oneHourAgo.toISOString()}`,
              status: 'completed',
              conclusion: 'failure',
              per_page: 10
            });
            
            // Calculate health score
            let healthScore = 100;
            let alerts = [];
            
            if (isBlocked) {
              healthScore -= 50;
              alerts.push({
                level: 'critical',
                message: `Automation blocked: ${blockInfo.reason}`,
                timestamp: blockInfo.timestamp
              });
            }
            
            if (recentIssues.length > 0) {
              healthScore -= (recentIssues.length * 10);
              alerts.push({
                level: 'warning',
                message: `${recentIssues.length} urgent issues requiring attention`,
                issues: recentIssues.map(i => `#${i.number}: ${i.title}`)
              });
            }
            
            if (workflowRuns.total_count > 5) {
              healthScore -= 20;
              alerts.push({
                level: 'warning',
                message: `High workflow failure rate: ${workflowRuns.total_count} failures in last hour`
              });
            }
            
            healthScore = Math.max(0, healthScore);
            
            const systemStatus = {
              health_score: healthScore,
              status: healthScore >= 90 ? 'healthy' : healthScore >= 70 ? 'warning' : 'critical',
              automation_blocked: isBlocked,
              urgent_issues: recentIssues.length,
              recent_failures: workflowRuns.total_count,
              alerts: alerts,
              last_check: now.toISOString()
            };
            
            core.setOutput('system_status', JSON.stringify(systemStatus));
            core.setOutput('health_score', healthScore);
            core.setOutput('status_level', systemStatus.status);
            
            return systemStatus;
            
      - name: Update System Status Badge
        uses: actions/github-script@v7
        with:
          script: |
            const statusInfo = JSON.parse('${{ steps.health_check.outputs.system_status }}');
            const score = statusInfo.health_score;
            const status = statusInfo.status;
            
            // Determine badge color
            const colorMap = {
              'healthy': 'brightgreen',
              'warning': 'yellow', 
              'critical': 'red'
            };
            
            const color = colorMap[status] || 'lightgrey';
            const badgeUrl = `https://img.shields.io/badge/System%20Health-${score}%25-${color}`;
            
            // Update README if it exists
            try {
              const { data: readme } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md'
              });
              
              let content = Buffer.from(readme.content, 'base64').toString();
              const healthBadge = `![System Health](${badgeUrl})`;
              
              // Replace existing health badge or add new one
              const healthBadgeRegex = /!\[System Health\].*$/m;
              if (healthBadgeRegex.test(content)) {
                content = content.replace(healthBadgeRegex, healthBadge);
              } else {
                // Add after progress badge if it exists
                const progressBadgeRegex = /(!\[Progress\].*$)/m;
                if (progressBadgeRegex.test(content)) {
                  content = content.replace(progressBadgeRegex, `$1 ${healthBadge}`);
                } else {
                  content = `${healthBadge}\n\n${content}`;
                }
              }
              
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md',
                message: `📊 Update system health badge: ${score}%`,
                content: Buffer.from(content).toString('base64'),
                sha: readme.sha
              });
            } catch (error) {
              console.log('Could not update README:', error.message);
            }
            
      - name: Send Critical Alerts
        if: steps.health_check.outputs.status_level == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            const statusInfo = JSON.parse('${{ steps.health_check.outputs.system_status }}');
            
            // Create critical alert issue
            const alertBody = `
# 🚨 시스템 심각 경고

**시간**: ${statusInfo.last_check}  
**상태**: CRITICAL (${statusInfo.health_score}%)

## 🔍 감지된 문제들

${statusInfo.alerts.map(alert => {
  let alertText = `### ${alert.level.toUpperCase()}: ${alert.message}`;
  if (alert.timestamp) alertText += `\n**시간**: ${alert.timestamp}`;
  if (alert.issues) alertText += `\n**관련 이슈들**:\n${alert.issues.map(i => `- ${i}`).join('\n')}`;
  return alertText;
}).join('\n\n')}

## 📋 권장 조치

1. 🔍 [에러 핸들링 가이드](./docs/error-handling.md) 참조
2. 🏥 시스템 헬스체크 실행: \`./scripts/health-check.sh --verbose\`
3. 🚫 필요시 긴급 중단: \`echo '{"reason":"manual_stop"}' > .automation-blocked\`

## 📊 시스템 상태

- **자동화 차단**: ${statusInfo.automation_blocked ? '🚫 예' : '✅ 아니요'}
- **긴급 이슈**: ${statusInfo.urgent_issues}개
- **최근 실패**: ${statusInfo.recent_failures}회 (지난 1시간)

---
*🤖 자동 모니터링 시스템*
            `;
            
            // Check if similar alert exists in last 2 hours
            const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000);
            const { data: recentAlerts } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'system-alert,critical-alert',
              since: twoHoursAgo.toISOString(),
              state: 'open'
            });
            
            // Only create new alert if no recent similar one exists
            if (recentAlerts.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 CRITICAL: System Health at ${statusInfo.health_score}%`,
                body: alertBody,
                labels: ['system-alert', 'critical-alert', 'urgent']
              });
            }
            
      - name: Update Monitoring Dashboard
        uses: actions/github-script@v7
        with:
          script: |
            const statusInfo = JSON.parse('${{ steps.health_check.outputs.system_status }}');
            
            // Read current monitoring data
            let monitoringHistory = [];
            try {
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'docs/monitoring-history.json'
              });
              monitoringHistory = JSON.parse(Buffer.from(file.content, 'base64').toString());
            } catch (error) {
              // File doesn't exist, start fresh
            }
            
            // Add current status to history
            monitoringHistory.push({
              timestamp: statusInfo.last_check,
              health_score: statusInfo.health_score,
              status: statusInfo.status,
              automation_blocked: statusInfo.automation_blocked,
              urgent_issues: statusInfo.urgent_issues,
              recent_failures: statusInfo.recent_failures
            });
            
            // Keep only last 7 days of data (96 entries per day at 15-min intervals)
            const maxEntries = 96 * 7;
            if (monitoringHistory.length > maxEntries) {
              monitoringHistory = monitoringHistory.slice(-maxEntries);
            }
            
            // Update monitoring history file
            let existingSha;
            try {
              const { data: existing } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'docs/monitoring-history.json'
              });
              existingSha = existing.sha;
            } catch (error) {
              // File doesn't exist
            }
            
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'docs/monitoring-history.json',
              message: '📊 Update monitoring history',
              content: Buffer.from(JSON.stringify(monitoringHistory, null, 2)).toString('base64'),
              sha: existingSha
            });
            
            // Generate monitoring report
            const now = new Date();
            const last24h = monitoringHistory.filter(entry => 
              new Date(entry.timestamp) > new Date(now.getTime() - 24 * 60 * 60 * 1000)
            );
            
            const avgScore24h = last24h.length > 0 ? 
              Math.round(last24h.reduce((sum, entry) => sum + entry.health_score, 0) / last24h.length) : 0;
            
            const downtimeCount = last24h.filter(entry => entry.automation_blocked).length;
            const downtimePercentage = last24h.length > 0 ? 
              Math.round((downtimeCount / last24h.length) * 100) : 0;
            
            const monitoringReport = `# 📊 시스템 모니터링 리포트
            
**마지막 업데이트**: ${statusInfo.last_check}
            
## 🎯 현재 상태
            
- **시스템 상태**: ${statusInfo.status.toUpperCase()} (${statusInfo.health_score}%)
- **자동화**: ${statusInfo.automation_blocked ? '🚫 차단됨' : '✅ 정상'}
- **긴급 이슈**: ${statusInfo.urgent_issues}개
- **최근 실패**: ${statusInfo.recent_failures}회
            
## 📈 24시간 통계
            
- **평균 상태 점수**: ${avgScore24h}%
- **다운타임**: ${downtimePercentage}% (${downtimeCount}/${last24h.length} 체크)
- **체크 횟수**: ${last24h.length}회
            
## ⚠️ 현재 알림
            
${statusInfo.alerts.length > 0 ? 
  statusInfo.alerts.map(alert => `- **${alert.level.toUpperCase()}**: ${alert.message}`).join('\n') :
  '✅ 활성 알림 없음'
}
            
## 📊 상태 추이 (최근 24시간)
            
| 시간 | 상태 점수 | 상태 | 차단 | 이슈 | 실패 |
|------|-----------|------|------|------|------|
${last24h.slice(-10).reverse().map(entry => {
  const time = new Date(entry.timestamp).toLocaleTimeString();
  const statusEmoji = entry.status === 'healthy' ? '✅' : entry.status === 'warning' ? '⚠️' : '🚨';
  return `| ${time} | ${entry.health_score}% | ${statusEmoji} ${entry.status} | ${entry.automation_blocked ? '🚫' : '✅'} | ${entry.urgent_issues} | ${entry.recent_failures} |`;
}).join('\n')}
            
---
*자동 생성됨 - 15분마다 업데이트*
            `;
            
            // Update monitoring report
            let reportSha;
            try {
              const { data: report } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'docs/monitoring-report.md'
              });
              reportSha = report.sha;
            } catch (error) {
              // File doesn't exist
            }
            
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'docs/monitoring-report.md',
              message: '📊 Update monitoring report',
              content: Buffer.from(monitoringReport).toString('base64'),
              sha: reportSha
            });
