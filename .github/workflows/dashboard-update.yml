name: Project Dashboard Update
on:
  issues:
    types: [opened, closed, labeled, unlabeled]
  pull_request:
    types: [opened, closed, merged]
  workflow_run:
    types: [completed]
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes

jobs:
  update-dashboard:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate Dashboard
        uses: actions/github-script@v7
        with:
          script: |
            // Get all issues with claude-task label
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-task',
              state: 'all',
              per_page: 100
            });
            
            // Get all PRs
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            // Analyze project progress
            const modules = {};
            const phases = ['IMPLEMENTATION', 'TESTING', 'INTEGRATION'];
            
            issues.forEach(issue => {
              const title = issue.title;
              const match = title.match(/\[(\w+)\]\s+([^-]+)\s*-/);
              
              if (match) {
                const [, phase, moduleName] = match;
                const module = moduleName.trim();
                
                if (!modules[module]) {
                  modules[module] = {
                    name: module,
                    phases: {},
                    progress: 0,
                    status: 'pending'
                  };
                }
                
                modules[module].phases[phase] = {
                  issue_number: issue.number,
                  state: issue.state,
                  labels: issue.labels.map(l => l.name),
                  created_at: issue.created_at,
                  updated_at: issue.updated_at
                };
              }
            });
            
            // Calculate progress for each module
            Object.keys(modules).forEach(moduleName => {
              const module = modules[moduleName];
              const phaseCount = Object.keys(module.phases).length;
              const completedPhases = Object.values(module.phases).filter(p => p.state === 'closed').length;
              
              module.progress = phaseCount > 0 ? Math.round((completedPhases / phaseCount) * 100) : 0;
              
              if (module.progress === 100) {
                module.status = 'completed';
              } else if (module.progress > 0) {
                module.status = 'in-progress';
              } else {
                module.status = 'pending';
              }
              
              // Check for blocked status
              const hasBlockedIssues = Object.values(module.phases).some(p => 
                p.labels.includes('human-fix-needed') || p.labels.includes('blocked')
              );
              
              if (hasBlockedIssues) {
                module.status = 'blocked';
              }
            });
            
            // Calculate overall project progress
            const totalModules = Object.keys(modules).length;
            const completedModules = Object.values(modules).filter(m => m.status === 'completed').length;
            const overallProgress = totalModules > 0 ? Math.round((completedModules / totalModules) * 100) : 0;
            
            // Generate dashboard markdown
            const now = new Date().toISOString();
            const dashboard = `# 🚀 Auto-Dev System Dashboard
            
## 📊 Project Overview
**Last Updated**: ${now}  
**Overall Progress**: ${overallProgress}% (${completedModules}/${totalModules} modules)
            
## 🎯 Module Progress
            
| Module | Progress | Status | Implementation | Testing | Integration |
|--------|----------|--------|----------------|---------|-------------|
${Object.values(modules).map(module => {
  const impl = module.phases.IMPLEMENTATION || {};
  const test = module.phases.TESTING || {};
  const integ = module.phases.INTEGRATION || {};
  
  const statusEmoji = {
    'completed': '✅',
    'in-progress': '🔄',
    'blocked': '🚫',
    'pending': '⏳'
  }[module.status] || '❓';
  
  const phaseStatus = (phase) => {
    if (!phase.issue_number) return '⚪';
    if (phase.state === 'closed') return '✅';
    if (phase.labels?.includes('human-fix-needed')) return '🚫';
    if (phase.labels?.includes('needs-attention')) return '⚠️';
    return '🔄';
  };
  
  return `| ${module.name} | ${module.progress}% | ${statusEmoji} ${module.status} | ${phaseStatus(impl)} [#${impl.issue_number || 'N/A'}](https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${impl.issue_number || ''}) | ${phaseStatus(test)} [#${test.issue_number || 'N/A'}](https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${test.issue_number || ''}) | ${phaseStatus(integ)} [#${integ.issue_number || 'N/A'}](https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${integ.issue_number || ''}) |`;
}).join('\\n')}
            
## 🔄 Recent Activity
            
### Open Issues (Last 5)
${issues.filter(i => i.state === 'open').slice(0, 5).map(issue => 
  `- [#${issue.number}](${issue.html_url}) ${issue.title} (${new Date(issue.created_at).toLocaleDateString()})`
).join('\\n')}
            
### Recent PRs (Last 5)
${pulls.slice(0, 5).map(pr => 
  `- [#${pr.number}](${pr.html_url}) ${pr.title} (${pr.state}) - ${new Date(pr.created_at).toLocaleDateString()}`
).join('\\n')}
            
## ⚠️ Issues Requiring Attention
            
${issues.filter(i => 
  i.state === 'open' && 
  i.labels.some(l => ['human-fix-needed', 'blocked', 'urgent'].includes(l.name))
).map(issue => {
  const urgentLabels = issue.labels.filter(l => ['human-fix-needed', 'blocked', 'urgent'].includes(l.name));
  return `- 🚨 [#${issue.number}](${issue.html_url}) ${issue.title} (${urgentLabels.map(l => l.name).join(', ')})`;
}).join('\\n') || '✅ No issues requiring immediate attention'}
            
## 📈 Statistics
            
- **Total Issues**: ${issues.length}
- **Open Issues**: ${issues.filter(i => i.state === 'open').length}
- **Total PRs**: ${pulls.length}
- **Merged PRs**: ${pulls.filter(p => p.merged_at).length}
- **Modules Completed**: ${completedModules}/${totalModules}
            
## 🎛️ System Status
            
- **Automation**: ${issues.some(i => i.labels.some(l => l.name === 'human-fix-needed')) ? '🚫 Blocked (manual intervention needed)' : '✅ Running'}
- **CI/CD**: ${pulls.some(p => p.labels?.some(l => l.name === 'ci-failure')) ? '⚠️ Some failures detected' : '✅ Healthy'}
            
---
*🤖 This dashboard is automatically updated every 30 minutes*`;
            
            return dashboard;
            
      - name: Update Dashboard File
        uses: actions/github-script@v7
        with:
          script: |
            const dashboard = \`${{ steps.generate-dashboard.outputs.result }}\`;
            
            // Check if dashboard file exists
            let sha;
            try {
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'docs/dashboard.md'
              });
              sha = file.sha;
            } catch (error) {
              // File doesn't exist, will create new
            }
            
            // Update or create dashboard file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'docs/dashboard.md',
              message: '📊 Update project dashboard',
              content: Buffer.from(dashboard).toString('base64'),
              sha: sha
            });
            
      - name: Update README Badge
        uses: actions/github-script@v7
        with:
          script: |
            // Get current README
            let readmeContent, readmeSha;
            try {
              const { data: readme } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md'
              });
              readmeContent = Buffer.from(readme.content, 'base64').toString();
              readmeSha = readme.sha;
            } catch (error) {
              return; // README doesn't exist
            }
            
            // Calculate overall progress
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-task',
              state: 'all'
            });
            
            const modules = {};
            issues.forEach(issue => {
              const match = issue.title.match(/\[(\w+)\]\s+([^-]+)\s*-/);
              if (match) {
                const module = match[2].trim();
                if (!modules[module]) modules[module] = { total: 0, completed: 0 };
                modules[module].total++;
                if (issue.state === 'closed') modules[module].completed++;
              }
            });
            
            const totalModules = Object.keys(modules).length;
            const completedModules = Object.values(modules).filter(m => m.completed === m.total && m.total > 0).length;
            const progress = totalModules > 0 ? Math.round((completedModules / totalModules) * 100) : 0;
            
            // Update README with progress badge
            const badgeUrl = \`https://img.shields.io/badge/Progress-\${progress}%25-\${progress >= 100 ? 'brightgreen' : progress >= 50 ? 'yellow' : 'red'}\`;
            const dashboardBadge = \`[![Dashboard](https://img.shields.io/badge/Dashboard-View-blue)](./docs/dashboard.md)\`;
            const newBadges = \`![Progress](\${badgeUrl}) \${dashboardBadge}\`;
            
            // Replace or add badges at the top of README
            const badgeRegex = /!\[Progress\].*$/m;
            const updatedContent = badgeRegex.test(readmeContent) 
              ? readmeContent.replace(badgeRegex, newBadges)
              : \`\${newBadges}\\n\\n\${readmeContent}\`;
            
            if (updatedContent !== readmeContent) {
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md',
                message: '📊 Update progress badge',
                content: Buffer.from(updatedContent).toString('base64'),
                sha: readmeSha
              });
            }