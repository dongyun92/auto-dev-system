# API Service Template
# 사용자 관리 REST API 서비스 예시

name: "user-service"
description: "사용자 정보 관리를 위한 REST API 서비스"
version: "1.0.0"
module_type: "api"
priority: "high"

# 의존성: 데이터베이스가 먼저 설정되어야 함
depends_on:
  - "database-setup"

# 기술 스택
tech_stack:
  - "spring-boot"
  - "spring-data-jpa"
  - "postgresql"
  - "spring-security"
  - "junit"
  - "mockito"
  - "swagger"

# API 엔드포인트 정의
endpoints:
  - method: "GET"
    path: "/api/users"
    description: "사용자 목록 조회 (페이징 지원)"
    auth_required: true
    
  - method: "GET"
    path: "/api/users/{id}"
    description: "특정 사용자 정보 조회"
    auth_required: true
    
  - method: "POST"
    path: "/api/users"
    description: "새 사용자 생성"
    auth_required: true
    request_body:
      type: "object"
      properties:
        username: { type: "string", minLength: 3, maxLength: 50 }
        email: { type: "string", format: "email" }
        firstName: { type: "string", maxLength: 100 }
        lastName: { type: "string", maxLength: 100 }
    
  - method: "PUT"
    path: "/api/users/{id}"
    description: "사용자 정보 수정"
    auth_required: true
    
  - method: "DELETE"
    path: "/api/users/{id}"
    description: "사용자 삭제"
    auth_required: true

# 데이터베이스 스키마
database:
  tables:
    - name: "users"
      columns:
        - name: "id"
          type: "BIGINT"
          primary_key: true
          nullable: false
        - name: "username"
          type: "VARCHAR(50)"
          unique: true
          nullable: false
        - name: "email"
          type: "VARCHAR(255)"
          unique: true
          nullable: false
        - name: "first_name"
          type: "VARCHAR(100)"
          nullable: true
        - name: "last_name"
          type: "VARCHAR(100)"
          nullable: true
        - name: "created_at"
          type: "TIMESTAMP"
          nullable: false
        - name: "updated_at"
          type: "TIMESTAMP"
          nullable: false
      indexes:
        - name: "idx_users_email"
          columns: ["email"]
          unique: true
        - name: "idx_users_username"
          columns: ["username"]
          unique: true

# 테스트 요구사항
tests:
  unit_test_coverage: 85
  integration_tests: true
  e2e_tests: true
  test_data:
    - "test-users.json"
    - "test-scenarios.yaml"

# 환경 설정
configuration:
  environment_variables:
    - name: "DB_URL"
      description: "데이터베이스 연결 URL"
      required: true
    - name: "DB_USERNAME"
      description: "데이터베이스 사용자명"
      required: true
    - name: "DB_PASSWORD"
      description: "데이터베이스 비밀번호"
      required: true
      sensitive: true
    - name: "JWT_SECRET"
      description: "JWT 토큰 서명용 비밀키"
      required: true
      sensitive: true

# 보안 설정
security:
  authentication: "jwt"
  authorization: ["USER", "ADMIN"]
  sensitive_data: true
  encryption: false

# 성능 요구사항
performance:
  max_response_time: "200ms"
  throughput: "1000 req/sec"
  memory_limit: "512MB"

# 문서화
documentation:
  api_docs: true
  user_guide: true
  deployment_guide: false

# 배포 설정
deployment:
  docker: true
  kubernetes: false
  health_check:
    path: "/actuator/health"
    method: "GET"

# 모니터링
monitoring:
  metrics:
    - "request_count"
    - "response_time"
    - "error_rate"
    - "active_users"
  logging:
    level: "INFO"
    format: "json"
  alerts:
    - "response_time > 500ms"
    - "error_rate > 5%"

# 메타데이터
metadata:
  author: "Auto Development System"
  created_date: "2025-06-23"
  tags: ["api", "users", "crud", "rest"]
  estimated_effort: "3-5 days"
